{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialCart = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialCart,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingitem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingitem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingitem.quantity--;\n        existingitem.totalPrice = existingitem.totalPrice - existingitem.price;\n      }\n    }\n\n  }\n}); // \n\nconst sendCartData = () => {\n  return () => {};\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/unthinkable-lap-0253/Desktop/React/redux-advance-async/src/store/cart-slice.js"],"names":["createSlice","initialCart","items","totalQuantity","cartSlice","name","initialState","reducers","addItemToCart","state","action","newItem","payload","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","existingitem","filter","sendCartData","cartActions","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,aAAa,EAAE;AAFG,CAApB;AAKA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC5BK,EAAAA,IAAI,EAAE,MADsB;AAE5BC,EAAAA,YAAY,EAAEL,WAFc;AAG5BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGJ,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB;AACAP,MAAAA,KAAK,CAACN,aAAN;;AACA,UAAI,CAACU,YAAL,EAAmB;AACjBJ,QAAAA,KAAK,CAACP,KAAN,CAAYe,IAAZ,CAAiB;AACfD,UAAAA,EAAE,EAAEL,OAAO,CAACK,EADG;AAEfE,UAAAA,KAAK,EAAEP,OAAO,CAACO,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAET,OAAO,CAACO,KAJL;AAKfb,UAAAA,IAAI,EAAEM,OAAO,CAACU;AALC,SAAjB;AAOD,OARD,MAQO;AACLR,QAAAA,YAAY,CAACM,QAAb;AACAN,QAAAA,YAAY,CAACO,UAAb,GAA0BP,YAAY,CAACO,UAAb,GAA0BT,OAAO,CAACO,KAA5D;AACD;AACF,KAjBO;;AAkBRI,IAAAA,kBAAkB,CAACb,KAAD,EAAQC,MAAR,EAAgB;AAChC,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMW,YAAY,GAAGd,KAAK,CAACP,KAAN,CAAYY,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;AACAP,MAAAA,KAAK,CAACN,aAAN;;AACA,UAAIoB,YAAY,CAACJ,QAAb,KAA0B,CAA9B,EAAiC;AAC/BV,QAAAA,KAAK,CAACP,KAAN,GAAcO,KAAK,CAACP,KAAN,CAAYsB,MAAZ,CAAoBT,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACD,OAFD,MAEO;AACLO,QAAAA,YAAY,CAACJ,QAAb;AACAI,QAAAA,YAAY,CAACH,UAAb,GAA0BG,YAAY,CAACH,UAAb,GAA0BG,YAAY,CAACL,KAAjE;AACD;AACF;;AA5BO;AAHkB,CAAD,CAA7B,C,CAmCA;;AACA,MAAMO,YAAY,GAAG,MAAM;AACzB,SAAO,MAAM,CAEZ,CAFD;AAGD,CAJD;;AAKA,OAAO,MAAMC,WAAW,GAAGtB,SAAS,CAACuB,OAA9B;AAIP,eAAevB,SAAS,CAACwB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialCart = {\n  items: [],\n  totalQuantity: 0,\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialCart,\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title,\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingitem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n      if (existingitem.quantity === 1) {\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingitem.quantity--;\n        existingitem.totalPrice = existingitem.totalPrice - existingitem.price;\n      }\n    },\n  },\n});\n\n// \nconst sendCartData = () => {\n  return () => {\n    \n  }\n}\nexport const cartActions = cartSlice.actions;\n\n\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}